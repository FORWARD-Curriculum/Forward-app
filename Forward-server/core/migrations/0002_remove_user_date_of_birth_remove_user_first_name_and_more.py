# Generated by Django 5.1.6 on 2025-03-30 08:09

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='user',
            name='date_of_birth',
        ),
        migrations.RemoveField(
            model_name='user',
            name='first_name',
        ),
        migrations.RemoveField(
            model_name='user',
            name='last_name',
        ),
        migrations.AddField(
            model_name='user',
            name='consent',
            field=models.BooleanField(default=False, max_length=1, verbose_name='tracking consent'),
        ),
        migrations.AddField(
            model_name='user',
            name='display_name',
            field=models.CharField(default='', max_length=50, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='display name'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='user',
            name='facility_id',
            field=models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='facility id'),
        ),
        migrations.AddField(
            model_name='user',
            name='profile_picture',
            field=models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='profile picture link'),
        ),
        migrations.AddField(
            model_name='user',
            name='speech_speed',
            field=models.FloatField(blank=True, null=True, verbose_name='webSpeech speed'),
        ),
        migrations.AddField(
            model_name='user',
            name='speech_uri_index',
            field=models.PositiveIntegerField(blank=True, null=True, verbose_name='webSpeech uri'),
        ),
        migrations.AddField(
            model_name='user',
            name='text_size',
            field=models.CharField(default='txt-base', max_length=8, verbose_name='text size preference'),
        ),
        migrations.AddField(
            model_name='user',
            name='theme',
            field=models.CharField(default='light', max_length=13, verbose_name='theme preference'),
        ),
        migrations.AlterField(
            model_name='user',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, help_text='the uuid of the database item', primary_key=True, serialize=False),
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='the uuid of the database item', primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='The title of the lesson', max_length=200, validators=[django.core.validators.MinLengthValidator(3)])),
                ('description', models.TextField(help_text='A detailed description of what the lesson covers')),
                ('objectives', models.JSONField(default=list, help_text='List of learning objectives for this lesson')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.PositiveIntegerField(blank=True, help_text='Optional ordering within a curriculum', null=True)),
                ('tags', models.JSONField(blank=True, default=list, help_text='Tags for categorizing and searching lessons')),
            ],
            options={
                'ordering': ['order', 'created_at'],
                'indexes': [models.Index(fields=['order'], name='core_lesson_order_84bf95_idx')],
            },
        ),
        migrations.CreateModel(
            name='Poll',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='the uuid of the database item', primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='The title of the activity', max_length=200, validators=[django.core.validators.MinLengthValidator(3)])),
                ('instructions', models.TextField(help_text='Instructions for completing the activity')),
                ('order', models.PositiveIntegerField(help_text='Order within the lesson')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('config', models.JSONField(default=dict, help_text='Configuration options for poll display and behavior')),
                ('lesson', models.ForeignKey(help_text='The lesson this activity belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_activities', to='core.lesson')),
            ],
            options={
                'verbose_name': 'poll',
                'verbose_name_plural': 'polls',
            },
        ),
        migrations.CreateModel(
            name='PollQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='the uuid of the database item', primary_key=True, serialize=False)),
                ('question_text', models.TextField(help_text='The text of the poll question')),
                ('options', models.JSONField(help_text='Available options for the poll question')),
                ('allow_multiple', models.BooleanField(default=False, help_text='Whether multiple options can be selected')),
                ('order', models.PositiveIntegerField(help_text='Order within the poll')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('poll', models.ForeignKey(help_text='The poll this poll question belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='polls', to='core.poll')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='PollQuestionResponse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='the uuid of the database item', primary_key=True, serialize=False)),
                ('partial_response', models.BooleanField(blank=True, null=True)),
                ('time_spent', models.PositiveIntegerField(default=0)),
                ('attempts_left', models.PositiveIntegerField(default=0)),
                ('response_data', models.JSONField(help_text="The user's response data in JSON format")),
                ('lesson', models.ForeignKey(help_text='The lesson related to this response', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_lesson', to='core.lesson')),
                ('poll', models.ForeignKey(help_text='The poll associated with this question', on_delete=django.db.models.deletion.CASCADE, related_name='associated_poll', to='core.poll')),
                ('user', models.ForeignKey(help_text='The user who submitted this response', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_response_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='the uuid of the database item', primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='The title of the activity', max_length=200, validators=[django.core.validators.MinLengthValidator(3)])),
                ('instructions', models.TextField(help_text='Instructions for completing the activity')),
                ('order', models.PositiveIntegerField(help_text='Order within the lesson')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('passing_score', models.PositiveIntegerField(help_text='Minimum score required to pass the quiz')),
                ('feedback_config', models.JSONField(default=dict, help_text='Configuration for feedback based on score ranges')),
                ('lesson', models.ForeignKey(help_text='The lesson this activity belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_activities', to='core.lesson')),
            ],
            options={
                'verbose_name': 'quiz',
                'verbose_name_plural': 'quizzes',
                'ordering': ['order', 'created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='the uuid of the database item', primary_key=True, serialize=False)),
                ('question_text', models.TextField(help_text='The text of the question')),
                ('feedback_config', models.JSONField(blank=True, default=dict, help_text='Feedback configuration for this question, with options for correct/incorrect responses')),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False'), ('multiple_select', 'Multiple Select')], help_text='The type of question', max_length=20)),
                ('has_correct_answer', models.BooleanField(default=True, help_text='Whether this question has correct answers')),
                ('choices', models.JSONField(help_text='Available choices and correct answers in JSON format')),
                ('is_required', models.BooleanField(default=True, help_text='Whether this question must be answered')),
                ('order', models.PositiveIntegerField(help_text='Order within the quiz')),
                ('quiz', models.ForeignKey(help_text='The quiz this question belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='core.quiz')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='TextContent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='the uuid of the database item', primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='The title of this content section', max_length=200, validators=[django.core.validators.MinLengthValidator(3)])),
                ('content', models.TextField(help_text='The main content text, can include HTML/markdown formatting')),
                ('order', models.PositiveIntegerField(help_text='Order within the lesson')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson', models.ForeignKey(help_text='The lesson this content belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='text_contents', to='core.lesson')),
            ],
            options={
                'verbose_name': 'text content',
                'verbose_name_plural': 'text contents',
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='TextContentResponse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='the uuid of the database item', primary_key=True, serialize=False)),
                ('partial_response', models.BooleanField(blank=True, null=True)),
                ('time_spent', models.PositiveIntegerField(default=0)),
                ('attempts_left', models.PositiveIntegerField(default=0)),
                ('lesson', models.ForeignKey(help_text='The lesson related to this response', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_lesson', to='core.lesson')),
                ('text_content', models.ForeignKey(help_text='The text content associated with this response', on_delete=django.db.models.deletion.CASCADE, related_name='associated_textcontent', to='core.textcontent')),
                ('user', models.ForeignKey(help_text='The user who submitted this response', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_response_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserQuizResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveSmallIntegerField(blank=True, help_text="The user's score on this quiz", null=True)),
                ('is_complete', models.BooleanField(default=False, help_text='Whether the quiz has been completed and submitted')),
                ('completion_percentage', models.FloatField(default=0.0, help_text='Percentage completion of the lesson')),
                ('time_spent', models.IntegerField(blank=True, help_text='The total time spent on this question', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quiz', models.ForeignKey(help_text='The quiz that was answered', on_delete=django.db.models.deletion.CASCADE, related_name='user_responses', to='core.quiz')),
                ('user', models.ForeignKey(help_text='The user who submitted this quiz response', on_delete=django.db.models.deletion.CASCADE, related_name='quiz_responses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'quiz response',
                'verbose_name_plural': 'quiz responses',
                'unique_together': {('user', 'quiz')},
            },
        ),
        migrations.CreateModel(
            name='Writing',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='the uuid of the database item', primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='The title of the activity', max_length=200, validators=[django.core.validators.MinLengthValidator(3)])),
                ('instructions', models.TextField(help_text='Instructions for completing the activity')),
                ('order', models.PositiveIntegerField(help_text='Order within the lesson')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('prompts', models.JSONField(default=list, help_text='List of writing prompts for the activity')),
                ('lesson', models.ForeignKey(help_text='The lesson this activity belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_activities', to='core.lesson')),
            ],
            options={
                'verbose_name': 'writing activity',
                'verbose_name_plural': 'writing activities',
                'ordering': ['order', 'created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WritingResponse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='the uuid of the database item', primary_key=True, serialize=False)),
                ('partial_response', models.BooleanField(blank=True, null=True)),
                ('time_spent', models.PositiveIntegerField(default=0)),
                ('attempts_left', models.PositiveIntegerField(default=0)),
                ('response', models.CharField(default='', max_length=10000)),
                ('lesson', models.ForeignKey(help_text='The lesson related to this response', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_lesson', to='core.lesson')),
                ('user', models.ForeignKey(help_text='The user who submitted this response', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_response_user', to=settings.AUTH_USER_MODEL)),
                ('writing', models.ForeignKey(help_text='The writing that was answered', on_delete=django.db.models.deletion.CASCADE, related_name='associated_writing', to='core.writing')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserQuestionResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response_data', models.JSONField(help_text="The user's response data in JSON format")),
                ('is_correct', models.BooleanField(blank=True, help_text='Whether this response is correct (null if not automatically gradable)', null=True)),
                ('feedback', models.TextField(blank=True, help_text='Feedback provided for this response', null=True)),
                ('time_spent', models.IntegerField(blank=True, help_text='The total time spent on this question', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.ForeignKey(help_text='The question that was answered', on_delete=django.db.models.deletion.CASCADE, related_name='user_responses', to='core.question')),
                ('quiz_response', models.ForeignKey(help_text='The parent quiz response this question response belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='question_responses', to='core.userquizresponse')),
            ],
            options={
                'verbose_name': 'question response',
                'verbose_name_plural': 'question responses',
                'unique_together': {('quiz_response', 'question')},
            },
        ),
    ]
